<?xml version="1.0"?>
<!-- If your plugin defines device types, you can define them here.

	 Devices must specify their type (via the type attribute):

		relay (ON/OFF/STATUS)
		dimmer (ON/OFF/DIM/BRIGHTEN/SET BRIGHTNESS/STATUS)
		speedcontrol (ON/OFF/SET SPEED LEVEL/SET SPEED INDEX/INCREASE/DECREASE/STATUS)
		sensor (ON/OFF/STATUS)
		thermostat
		sprinkler
		custom

	 The first six inherit states, actions and events from Indigo. You can
	 also specify your own custom actions and additional states, if needed.

	 The Device example below specifies the thermostat type.

	 Devices must also specify a unique typeID - so, for instance, if you define
	 2 different thermostat type devices then your plugin can distinguish between
	 the two by the typeID.
-->

<Devices>
	<!-- This device illustrates how a plugin can inherit Indigo's thermostat
	device behavior including thermostat device states, thermostat actions,
	and will support Indigo and Indigo Touch's native UI for thermostat type
	devices.
	-->
	<Device type="thermostat" id="EcobeeThermostat">
		<Name>Ecobee Thermostat</Name>
		<ConfigUI>
			<Field id="address" type="menu">
				<List class="self" method="get_thermostats"/>
			</Field>
			<!-- The ConfigUI here is just an example of the type of device
			specific UI that might be needed. Here you might specify a text
			field for an IP address, a serial port popup, or other device
			specific options.
			-->

			<!-- By default thermostat type devices automatically inherit these
			device properties which describe the characteristics of a specific
			thermostat instance:

				NumTemperatureInputs:			should range between 1 and 3
				NumHumidityInputs:				should range between 0 and 3
				ShowCoolHeatEquipmentStateUI:	True or False

			Plugins can update these properties either in device ConfigUI
			(like below), or can update them from python by using the
			dev.replacePluginPropsOnServer() method, most likely inside your
			deviceStartComm method. Both will trigger
			the Indigo Server to automatically rebuild the device's states
			list based on the needed changes. Since most entry-level thermostats
			have 1 temp sensor and 0 humidity sensors, those are the default
			values. If your thermostat supports those, you don't need to change
			anything.
			-->
		</ConfigUI>
		<States>
			<!-- By default thermostat type devices automatically inherit these
			read-only states:

				temperatureInputsAll, humidityInputsAll,
				hvacOperationModeIsOff, hvacOperationModeIsHeat, hvacOperationModeIsCool,
				hvacOperationModeIsAuto, hvacOperationModeIsProgramHeat, hvacOperationModeIsProgramCool,
				hvacOperationModeIsProgramAuto,
				hvacFanModeIsAuto, hvacFanModeIsAlwaysOn, hvacFanModeIsCycle.

			Additionally, the following writable states are inherited:

				temperatureInput1, temperatureInput2, temperatureInput3,
				humidityInput1, humidityInput2, humidityInput3,
				setpointHeat, setpointCool,
				hvacOperationMode, hvacFanMode,
				hvacCoolerIsOn, hvacHeaterIsOn, hvacFanIsOn

			The Indigo Server automatically updates some of the read-only states when
			a writable state is updated. For example, if your plugin updates the
			temperatureInput1 state then the temperatureInputsAll state is automatically
			updated for you. Likewise, if you update the hvacOperationMode state to
			indigo.kHvacMode.Heat then the read-only state hvacOperationModeIsHeat will
			be set to True and all of the other hvacOperationModeIs* states will be set
			to False.

			The plugin can specify additional custom states and custom
			actions (in Actions.xml) to modify custom states. As an example
			here, we define a new custom state, backlightBrightness, which
			is used to control the brightness of the backlit display of
			the thermostat.
			-->
			<State id="climate">
				<ValueType>String</ValueType>
				<TriggerLabel>Climate</TriggerLabel>
				<ControlPageLabel>Climate</ControlPageLabel>
			</State>
			<State id="occupied" readonly="true">
				<ValueType boolType="YesNo">Boolean</ValueType>
				<TriggerLabel>Occupied</TriggerLabel>
				<ControlPageLabel>Occupied</ControlPageLabel>
			</State>
			<State id="autoAway" readonly="true">
				<ValueType boolType="YesNo">Boolean</ValueType>
				<TriggerLabel>Auto-Away</TriggerLabel>
				<ControlPageLabel>Auto-Away</ControlPageLabel>
			</State>
			<State id="autoHome" readonly="true">
				<ValueType boolType="YesNo">Boolean</ValueType>
				<TriggerLabel>Auto-Home</TriggerLabel>
				<ControlPageLabel>Auto-Home</ControlPageLabel>
			</State>
			<State id="authenticated" readonly="true">
				<ValueType boolType="YesNo">Boolean</ValueType>
				<TriggerLabel>Authenticated</TriggerLabel>
				<ControlPageLabel>Authenticated</ControlPageLabel>
			</State>
			<State id="fanMinOnTime" readonly="false">
				<ValueType>Integer</ValueType>
				<TriggerLabel>Minimum fan time</TriggerLabel>
				<ControlPageLabel>Minimum fan time</ControlPageLabel>
			</State>
		</States>
	</Device>

	<Device type="thermostat" id="EcobeeSmartThermostat">
		<Name>Ecobee Smart Thermostat</Name>
		<ConfigUI>
			<Field id="address" type="menu">
				<List class="self" method="get_thermostats"/>
			</Field>
		</ConfigUI>
		<States>
			<State id="climate">
				<ValueType>String</ValueType>
				<TriggerLabel>Climate</TriggerLabel>
				<ControlPageLabel>Climate</ControlPageLabel>
			</State>
			<State id="authenticated" readonly="true">
				<ValueType boolType="YesNo">Boolean</ValueType>
				<TriggerLabel>Authenticated</TriggerLabel>
				<ControlPageLabel>Authenticated</ControlPageLabel>
			</State>
		</States>
	</Device>

	<Device type="custom" id="ecobeeRemoteSensor">
		<Name>Ecobee Remote Sensor</Name>
		<ConfigUI>
			<Field id="address" type="menu">
				<List class="self" method="get_remote_sensors"/>
			</Field>
		</ConfigUI>
		<States>
			<State id="temperature" readonly="true">
				<ValueType>Float</ValueType>
				<TriggerLabel>Temperature</TriggerLabel>
				<ControlPageLabel>Temperature</ControlPageLabel>
			</State>
			<State id="occupied" readonly="true">
				<ValueType boolType="YesNo">Boolean</ValueType>
				<TriggerLabel>Occupied</TriggerLabel>
				<ControlPageLabel>Occupied</ControlPageLabel>
			</State>
		</States>
		<UiDisplayStateId>temperature</UiDisplayStateId>
	</Device>
</Devices>
